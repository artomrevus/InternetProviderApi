// <auto-generated />
using System;
using InternetProvider.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InternetProvider.Infrastructure.Migrations
{
    [DbContext(typeof(InternetProviderContext))]
    [Migration("20241109231318_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("CityId")
                        .HasName("PK__City__031491A82FEEEE5D");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<int>("ClientStatusId")
                        .HasColumnType("int")
                        .HasColumnName("client_status_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("registration_date");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("ClientId")
                        .HasName("PK__Client__BF21A424B23CB230");

                    b.HasIndex("ClientStatusId");

                    b.HasIndex("LocationId");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Client__A1936A6BA1C1D8C0")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Client__AB6E6164CB8757C8")
                        .IsUnique();

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.ClientStatus", b =>
                {
                    b.Property<int>("ClientStatusId")
                        .HasColumnType("int")
                        .HasColumnName("client_status_id");

                    b.Property<string>("ClientStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("client_status");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("ClientStatusId")
                        .HasName("PK__ClientSt__B82E681503D75972");

                    b.ToTable("ClientStatus", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Connection", b =>
                {
                    b.Property<int>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("connection_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectionId"));

                    b.Property<DateOnly>("ConnectionDate")
                        .HasColumnType("date")
                        .HasColumnName("connection_date");

                    b.Property<int>("ConnectionTariffId")
                        .HasColumnType("int")
                        .HasColumnName("connection_tariff_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<int?>("InternetConnectionRequestId")
                        .HasColumnType("int")
                        .HasColumnName("internet_connection_request_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("ConnectionId")
                        .HasName("PK__Connecti__E4AA4DD0066B8AC9");

                    b.HasIndex("ConnectionTariffId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex(new[] { "ConnectionDate" }, "Connection__connection_date_IDX");

                    b.HasIndex(new[] { "InternetConnectionRequestId" }, "IX_Connection_InternetConnectionRequestId");

                    b.HasIndex(new[] { "InternetConnectionRequestId" }, "UQ__Connecti__AB3061E48A55B137")
                        .IsUnique()
                        .HasFilter("[internet_connection_request_id] IS NOT NULL");

                    b.ToTable("Connection_", null, t =>
                        {
                            t.HasTrigger("ConnectionInsertTrigger");

                            t.HasTrigger("ConnectionUpdateTrigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.ConnectionEquipment", b =>
                {
                    b.Property<int>("ConnectionEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("connection_equipment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectionEquipmentId"));

                    b.Property<int>("ConnectionEquipmentAmount")
                        .HasColumnType("int")
                        .HasColumnName("connection_equipment_amount");

                    b.Property<int>("ConnectionId")
                        .HasColumnType("int")
                        .HasColumnName("connection_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OfficeEquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("office_equipment_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("ConnectionEquipmentId")
                        .HasName("PK__Connecti__F31B608BE8AC5CC2");

                    b.HasIndex(new[] { "ConnectionId" }, "IX_ConnectionEquipment_Connection_Id");

                    b.HasIndex(new[] { "OfficeEquipmentId" }, "IX_ConnectionEquipment_OfficeEquipmentId");

                    b.ToTable("ConnectionEquipment", null, t =>
                        {
                            t.HasTrigger("ConnectionEquipmentTrigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.ConnectionTariff", b =>
                {
                    b.Property<int>("ConnectionTariffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("connection_tariff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectionTariffId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("ConnectionTariffId")
                        .HasName("PK__Connecti__7986F62E2962E692");

                    b.ToTable("ConnectionTariff", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.ConnectionsReport", b =>
                {
                    b.Property<decimal?>("AvarageConnectionPrice")
                        .HasColumnType("money")
                        .HasColumnName("avarage_connection_price");

                    b.Property<string>("CityName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city_name");

                    b.Property<int?>("ConnectionsCount")
                        .HasColumnType("int")
                        .HasColumnName("connections_count");

                    b.Property<string>("InternetTariffName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("internet_tariff_name");

                    b.Property<decimal?>("MaxConnectionPrice")
                        .HasColumnType("money")
                        .HasColumnName("max_connection_price");

                    b.Property<decimal?>("MinConnectionPrice")
                        .HasColumnType("money")
                        .HasColumnName("min_connection_price");

                    b.Property<int?>("MultiApartmentBuildingConnections")
                        .HasColumnType("int")
                        .HasColumnName("multi_apartment_building_connections");

                    b.Property<int?>("PrivateSectorConnections")
                        .HasColumnType("int")
                        .HasColumnName("private_sector_connections");

                    b.Property<int?>("SmallApartmentBuildingConnections")
                        .HasColumnType("int")
                        .HasColumnName("small_apartment_building_connections");

                    b.ToTable((string)null);

                    b.ToView("ConnectionsReport", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<int>("EmployeePositionId")
                        .HasColumnType("int")
                        .HasColumnName("employee_position_id");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int")
                        .HasColumnName("employee_status_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int")
                        .HasColumnName("office_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__C52E0BA81274DB0B");

                    b.HasIndex("EmployeePositionId");

                    b.HasIndex("EmployeeStatusId");

                    b.HasIndex("OfficeId");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Employee__A1936A6B3F12F04C")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Employee__AB6E616404CDF810")
                        .IsUnique();

                    b.ToTable("Employee", null, t =>
                        {
                            t.HasTrigger("EmployeeOfficeTrigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.EmployeePosition", b =>
                {
                    b.Property<int>("EmployeePositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_position_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeePositionId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeePositionName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_position");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("EmployeePositionId")
                        .HasName("PK__Employee__A6A1257C60EFC98A");

                    b.ToTable("EmployeePosition", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.EmployeeStatus", b =>
                {
                    b.Property<int>("EmployeeStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeStatusId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("EmployeeStatusId")
                        .HasName("PK__Employee__EDD287846018B3E6");

                    b.ToTable("EmployeeStatus", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.EmployeesReport", b =>
                {
                    b.Property<int?>("ConnectionsCount")
                        .HasColumnType("int")
                        .HasColumnName("connections_count");

                    b.Property<int?>("DaysWithoutConnection")
                        .HasColumnType("int")
                        .HasColumnName("days_without_connection");

                    b.Property<string>("EmployeeFirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_first_name");

                    b.Property<string>("EmployeeLastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_last_name");

                    b.Property<string>("EmployeePosition")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_position");

                    b.Property<string>("EmployeeStatus")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_status");

                    b.Property<DateOnly?>("FirstConnectionDate")
                        .HasColumnType("date")
                        .HasColumnName("first_connection_date");

                    b.Property<DateOnly?>("LastConnectionDate")
                        .HasColumnType("date")
                        .HasColumnName("last_connection_date");

                    b.Property<string>("OfficeAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("office_address");

                    b.Property<string>("OfficeCity")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("office_city");

                    b.Property<string>("OfficeEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("office_email");

                    b.Property<string>("OfficePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("office_phone");

                    b.ToTable((string)null);

                    b.ToView("EmployeesReport", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("EquipmentId")
                        .HasName("PK__Equipmen__197068AF7EC45C10");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.EquipmentReport", b =>
                {
                    b.Property<int?>("CountConnectionsUse")
                        .HasColumnType("int")
                        .HasColumnName("count_connections_use");

                    b.Property<int?>("CountOfficesHave")
                        .HasColumnType("int")
                        .HasColumnName("count_offices_have");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("equipment_name");

                    b.Property<string>("EquipmentType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("equipment_type");

                    b.Property<int?>("TotalInOffices")
                        .HasColumnType("int")
                        .HasColumnName("total_in_offices");

                    b.ToTable((string)null);

                    b.ToView("EquipmentReport", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.EquipmentType", b =>
                {
                    b.Property<int>("EquipmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equipment_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentTypeId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EquipmentTypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("equipment_type");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("EquipmentTypeId")
                        .HasName("PK__Equipmen__D8B1EC05651C9D4A");

                    b.ToTable("EquipmentType", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.House", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("house_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HouseId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("house_number");

                    b.Property<int>("StreetId")
                        .HasColumnType("int")
                        .HasColumnName("street_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("HouseId")
                        .HasName("PK__House__E24626419289811A");

                    b.HasIndex("StreetId");

                    b.ToTable("House", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.InternetConnectionRequest", b =>
                {
                    b.Property<int>("InternetConnectionRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("internet_connection_request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InternetConnectionRequestId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("InternetConnectionRequestStatusId")
                        .HasColumnType("int")
                        .HasColumnName("internet_connection_request_status_id");

                    b.Property<int>("InternetTariffId")
                        .HasColumnType("int")
                        .HasColumnName("internet_tariff_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<DateOnly>("RequestDate")
                        .HasColumnType("date")
                        .HasColumnName("request_date");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("InternetConnectionRequestId")
                        .HasName("PK__Internet__AB3061E5B1D47AEA");

                    b.HasIndex("ClientId");

                    b.HasIndex("InternetConnectionRequestStatusId");

                    b.HasIndex("InternetTariffId");

                    b.HasIndex(new[] { "RequestDate" }, "InternetConnectionRequest_request_date_IDX");

                    b.HasIndex(new[] { "Number" }, "UQ__Internet__FD291E4145F9AB4B")
                        .IsUnique();

                    b.ToTable("InternetConnectionRequest", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.InternetConnectionRequestStatus", b =>
                {
                    b.Property<int>("InternetConnectionRequestStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("internet_connection_request_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InternetConnectionRequestStatusId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InternetConnectionRequestStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("internet_connection_request_status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("InternetConnectionRequestStatusId")
                        .HasName("PK__Internet__9CA7A241DFC511C2");

                    b.ToTable("InternetConnectionRequestStatus", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.InternetTariff", b =>
                {
                    b.Property<int>("InternetTariffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("internet_tariff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InternetTariffId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("InternetSpeedMbits")
                        .HasColumnType("int")
                        .HasColumnName("internet_speed_mbits");

                    b.Property<int>("InternetTariffStatusId")
                        .HasColumnType("int")
                        .HasColumnName("internet_tariff_status_id");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("location_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("InternetTariffId")
                        .HasName("PK__Internet__5DA1086BBE8656A4");

                    b.HasIndex("InternetTariffStatusId");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("InternetTariff", null, t =>
                        {
                            t.HasTrigger("InternetTariffUpdateTrigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.InternetTariffStatus", b =>
                {
                    b.Property<int>("InternetTariffStatusId")
                        .HasColumnType("int")
                        .HasColumnName("internet_tariff_status_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InternetTariffStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("internet_tariff_status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("InternetTariffStatusId")
                        .HasName("PK__Internet__A427AF2A349ABD7A");

                    b.ToTable("InternetTariffStatus", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("int")
                        .HasColumnName("apartment_number");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("HouseId")
                        .HasColumnType("int")
                        .HasColumnName("house_id");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("location_type_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__771831EA1718521C");

                    b.HasIndex("HouseId");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.LocationType", b =>
                {
                    b.Property<int>("LocationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationTypeId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LocationTypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location_type");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("LocationTypeId")
                        .HasName("PK__Location__535FD89A63DBD566");

                    b.ToTable("LocationType", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("office_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("OfficeId")
                        .HasName("PK__Office__2A196375878F0F99");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Office__A1936A6B595321FB")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Office__AB6E616424395FF7")
                        .IsUnique();

                    b.ToTable("Office", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.OfficeEquipment", b =>
                {
                    b.Property<int>("OfficeEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("office_equipment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeEquipmentId"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<int>("OfficeEquipmentAmount")
                        .HasColumnType("int")
                        .HasColumnName("office_equipment_amount");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int")
                        .HasColumnName("office_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("OfficeEquipmentId")
                        .HasName("PK__OfficeEq__05F556A58424C729");

                    b.HasIndex("OfficeId");

                    b.HasIndex(new[] { "EquipmentId" }, "IX_OfficeEquipment_EquipmentId");

                    b.HasIndex(new[] { "OfficeEquipmentAmount" }, "OfficeEquipment_office_equipment_amount_IDX");

                    b.ToTable("OfficeEquipment", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("street_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StreetId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("StreetName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("street");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("StreetId")
                        .HasName("PK__Street__665BB66B8FD12D0B");

                    b.HasIndex("CityId");

                    b.ToTable("Street", (string)null);
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Client", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.ClientStatus", "ClientStatus")
                        .WithMany("Clients")
                        .HasForeignKey("ClientStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_client_status");

                    b.HasOne("InternetProvider.Infrastructure.Models.Location", "Location")
                        .WithMany("Clients")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("fk_location");

                    b.Navigation("ClientStatus");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Connection", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.ConnectionTariff", "ConnectionTariff")
                        .WithMany("Connections")
                        .HasForeignKey("ConnectionTariffId")
                        .IsRequired()
                        .HasConstraintName("fk_connection_tariff");

                    b.HasOne("InternetProvider.Infrastructure.Models.Employee", "Employee")
                        .WithMany("Connections")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("fk_employee");

                    b.HasOne("InternetProvider.Infrastructure.Models.InternetConnectionRequest", "InternetConnectionRequest")
                        .WithOne("Connection")
                        .HasForeignKey("InternetProvider.Infrastructure.Models.Connection", "InternetConnectionRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_internet_connection_request");

                    b.Navigation("ConnectionTariff");

                    b.Navigation("Employee");

                    b.Navigation("InternetConnectionRequest");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.ConnectionEquipment", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.Connection", "Connection")
                        .WithMany("ConnectionEquipments")
                        .HasForeignKey("ConnectionId")
                        .IsRequired()
                        .HasConstraintName("fk_connection");

                    b.HasOne("InternetProvider.Infrastructure.Models.OfficeEquipment", "OfficeEquipment")
                        .WithMany("ConnectionEquipments")
                        .HasForeignKey("OfficeEquipmentId")
                        .IsRequired()
                        .HasConstraintName("fk_office_equipment");

                    b.Navigation("Connection");

                    b.Navigation("OfficeEquipment");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Employee", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.EmployeePosition", "EmployeePosition")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeePositionId")
                        .IsRequired()
                        .HasConstraintName("fk_employee_position");

                    b.HasOne("InternetProvider.Infrastructure.Models.EmployeeStatus", "EmployeeStatus")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_employee_status");

                    b.HasOne("InternetProvider.Infrastructure.Models.Office", "Office")
                        .WithMany("Employees")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("fk_office");

                    b.Navigation("EmployeePosition");

                    b.Navigation("EmployeeStatus");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Equipment", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.EquipmentType", "EquipmentType")
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_equipment_type");

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.House", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.Street", "Street")
                        .WithMany("Houses")
                        .HasForeignKey("StreetId")
                        .IsRequired()
                        .HasConstraintName("fk_street");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.InternetConnectionRequest", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.Client", "Client")
                        .WithMany("InternetConnectionRequests")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client");

                    b.HasOne("InternetProvider.Infrastructure.Models.InternetConnectionRequestStatus", "InternetConnectionRequestStatus")
                        .WithMany("InternetConnectionRequests")
                        .HasForeignKey("InternetConnectionRequestStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_request_status");

                    b.HasOne("InternetProvider.Infrastructure.Models.InternetTariff", "InternetTariff")
                        .WithMany("InternetConnectionRequests")
                        .HasForeignKey("InternetTariffId")
                        .IsRequired()
                        .HasConstraintName("fk_internet_tariff");

                    b.Navigation("Client");

                    b.Navigation("InternetConnectionRequestStatus");

                    b.Navigation("InternetTariff");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.InternetTariff", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.InternetTariffStatus", "InternetTariffStatus")
                        .WithMany("InternetTariffs")
                        .HasForeignKey("InternetTariffStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_tariff_status");

                    b.HasOne("InternetProvider.Infrastructure.Models.LocationType", "LocationType")
                        .WithMany("InternetTariffs")
                        .HasForeignKey("LocationTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_location_type_");

                    b.Navigation("InternetTariffStatus");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Location", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.House", "House")
                        .WithMany("Locations")
                        .HasForeignKey("HouseId")
                        .IsRequired()
                        .HasConstraintName("fk_house");

                    b.HasOne("InternetProvider.Infrastructure.Models.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_location_type");

                    b.Navigation("House");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Office", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.City", "City")
                        .WithMany("Offices")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("fk_city_Office");

                    b.Navigation("City");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.OfficeEquipment", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.Equipment", "Equipment")
                        .WithMany("OfficeEquipments")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("fk_equipment");

                    b.HasOne("InternetProvider.Infrastructure.Models.Office", "Office")
                        .WithMany("OfficeEquipments")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("fk_office_");

                    b.Navigation("Equipment");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Street", b =>
                {
                    b.HasOne("InternetProvider.Infrastructure.Models.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("fk_city_Street");

                    b.Navigation("City");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.City", b =>
                {
                    b.Navigation("Offices");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Client", b =>
                {
                    b.Navigation("InternetConnectionRequests");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.ClientStatus", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Connection", b =>
                {
                    b.Navigation("ConnectionEquipments");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.ConnectionTariff", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Employee", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.EmployeePosition", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.EmployeeStatus", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Equipment", b =>
                {
                    b.Navigation("OfficeEquipments");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.EquipmentType", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.House", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.InternetConnectionRequest", b =>
                {
                    b.Navigation("Connection");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.InternetConnectionRequestStatus", b =>
                {
                    b.Navigation("InternetConnectionRequests");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.InternetTariff", b =>
                {
                    b.Navigation("InternetConnectionRequests");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.InternetTariffStatus", b =>
                {
                    b.Navigation("InternetTariffs");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Location", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.LocationType", b =>
                {
                    b.Navigation("InternetTariffs");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Office", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("OfficeEquipments");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.OfficeEquipment", b =>
                {
                    b.Navigation("ConnectionEquipments");
                });

            modelBuilder.Entity("InternetProvider.Infrastructure.Models.Street", b =>
                {
                    b.Navigation("Houses");
                });
#pragma warning restore 612, 618
        }
    }
}
